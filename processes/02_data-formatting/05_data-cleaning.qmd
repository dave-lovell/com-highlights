---
title: "05_data cleaning"
format: html
editor: visual
---

### Libraries

```{r libs}
#| message: false
library(here)
library(dplyr)
library(vroom)
library(stringr)
library(purrr)
library(rlang) # for nice error handling
library(lobstr)
```

## Setup

### Read in Census Table

```{r readInCensusTable}
census_table <- readRDS(here("data", "intermediate", "census", "merged-data", "02_grouped-by-level-and-nation_2022-10-25.RDS"))

# tree(census_table, max_depth = 3)
```

## Read in Helpers

```{r readHelpers}

## modify_census_tibbles -----------------------------------------------------
## Wrapper around a for loop. Modifies `census_table` at specified 'addresses'
## modify_census_tibbles(x, modify_func, ..., nations, levels, stats)
modify_census_tibbles <- readRDS(here("functions", "modify-census.RDS"))

## selector -------------------------------------------------------------------
## Function factory: makes select functions with specified args.
## Helpful for selecting flexibly amidst slightly inconsistent tables
## selector(...)
selector <- readRDS(here("functions", "selector.RDS"))

## remove-prefix -------------------------------------------------------------
## Chops off a prefix when given a string and a separator. Will take regex if
## asked nicely.
remove_prefix <- function(x, sep, regex = FALSE){
  
  if(!regex){ sep <- stringr::fixed(sep) }
  
  sep_end <- stringr::str_locate(x, sep)[, "end"] 
  
  if(any(is.na(sep_end))){
    na_seps <- which(is.na(sep_end))
    sep_end[na_seps] <- 0

    }
  
  string_out <- str_sub(x, sep_end + 1)
  
  return(string_out)
                 
}
```

## Renaming

### Remove all prefixes

```{r removePrefixes}
## Remove prefixes from all tibbles -------------------------------------------
census_table <-
  modify_census_tibbles(
    census_table,
    modify_func = rename_with,
    .fn = remove_prefix,
    .cols = everything(),
    sep = "..")
```

### Rename ethnicity tibbles

```{r ethnicityRename}
## census-select-ews() -------------------------------------------------------
## Using selector() to retain certain columns across English, Welsh and 
## Scottish tibbles. 

census_select_ethn <- selector(
  matches("com"), matches("diocese"), matches("nation"),
  matches("parish_code"), matches("oa_id"),
  matches("geo_code"), matches("sa_id"),
  matches("proportion_of_.+_within_co_m_boundary")
  )

## select only relevant fields for ethnicity across England, Scotland, Wales -
census_table <-
  modify_census_tibbles(
    census_table,
    modify_func = census_select_ethn,
    
    white_or_white_british,
    black_or_black_british,
    asian_or_asian_british,
    mixed_multiple_ethnicity,
    other_ethnicity,
    
    stats = "ethn",
    nations = c("England", "Wales", "Scotland")
    )

## TODO: remove surplus columns for Northern-Ireland ethnicity tibbles
##       can still use census_select_ethn

 # drop surplus columns in Norther-Ireland Ethnicity tibbles-ladun
 census_table <-
   modify_census_tibbles(
     census_table,
     modify_func = select,
     
     .cols = -starts_with("ethnic_"),
     
     stats = c("ethn"),
     nations = c("Northern-Ireland")
   )

```

Rename religion tibbles

```{r Rename Religion Tibbles}



# drop all duplicate columns in religion analysis 
census_table <-
   modify_census_tibbles(
     census_table,
     modify_func = select,
     .cols = -(starts_with("religion_") & !matches("^religion_not_stated$")),
     stats = "rel",
     nations = "England"
     
  # nations = c("Wales", "Scotland", "Northern-Ireland", "England")
)
  


# drop all prefic religion_ in religion analysis - check
 # census_table <-
 #   modify_census_tibbles(
 #     census_table,
 #     modify_func = rename_with,
 #     .fn = remove_prefix,
 #     .cols = starts_with("religion_"),
 #     "religion_",
 #     stats = "rel"
 #  # nations = c("Wales", "Scotland", "Northern-Ireland", "England")
 # )



census_select_rel <- selector(
  matches("com"), matches("diocese"), matches("nation"),
   matches("oa_id"), matches("sa_id"),
  matches("proportion_of_.+_within_co_m_boundary"), matches("christian"),
  matches("buddhist"), matches("hindu"), matches("jewish"),matches("muslim"),
  matches("sikh"), matches("other_religion"), matches("no_religion"), 
  matches("religion_not_stated")
  )

```

### Rename age tibbles

```{r renameAge}
## across all population tibbles, replace "xsomething" w/ "age_something"
census_table <-
  modify_census_tibbles(
    census_table,
    modify_func = rename_with,
    
    .fn = str_replace,
    .cols = starts_with("x"),
    
    "x", "age_",
    
    stats = "pop"
)

## TODO: Drop '_years_old' from all age columns
```

### Rename health tibbles

```{r renameHealth}

# drop all suffix _health in health analysis
 census_table <-
   modify_census_tibbles(
     census_table,
     modify_func = rename_with,
     
     .fn = str_remove,
     .cols = ends_with("_health"),
     "_health",
     
  stats = "health"
  # nations = c("Wales", "Scotland", "Northern-Ireland", "England")
 )
 
```

### Remove total_persons columns

That is, remove them from all tibbles except population statistics tibbles. We may review this in future.

```{r removeTotalPerson}
 # drop total person ok
 census_table <-
   modify_census_tibbles(
     census_table,
     modify_func = select,
     
     .cols = -any_of(c("population", "total_population",
                       "totals", "total", "total_persons"))
   )
```

### Popultion tibbles: Remove gender fields

```{r makeGenderFieldsConsistent}
#| eval: false
 #Add _persons to pop tables of Northern Ireland& Repulblic of Ireland ladun
 
rename_males_females <- function(x){
  out <- 
    str_replace_all(x, "males", "male_persons") |>    
    str_replace_all("females", "female_persons")
  
  return(out)
    
}

census_table <-
   modify_census_tibbles(
     census_table,
     modify_func = rename_with,
     .fn = rename_males_females,
     .cols = any_of(c("males", "females")),
     #...
     # .cols = any_of(c("males", "females")),
     # 
     #  male_persons <- "males",
     # female_persons <- "females",
    
     stats = "pop"
     #nations = c("Republic-of-Ireland")
     #nations = c("Republic-of-Ireland", "Northern-Ireland", "Scotland")
   )

census_table <- modify_census_tibbles(
  census_table,
  modify_func = select,
  -c(male_persons, female_persons),
  stats = "pop"
)
```

### Rename 'overlap proportion' column

For the CoM tibbles, there's a column that tells us the extent to which every OA (or similar) overlaps with the custom CoM area. Currently it's called `proportion_of_[thing]_within_co_m_boundary`, which isn't ideal.

```{r renameComProportion}
 
 # rename of column proportion of oa - Ireland & Northern Ireland ok
 ## Make a silly function that will work with 'rename_with()'
 ## Might crash if it tries to rename multiple columns - good!
 make_name_com_prop <- function(x){
   "com_prop"
 }
 
 census_table <-
   modify_census_tibbles(
     census_table,
     rename_with,
     
     .cols = matches("proportion_of_.+_within_co_m_boundary"),
     .fn  = make_name_com_prop
 )

```

## CoM Overlap Proportions

### Ensure overlap is never \> 1

```{r roundUpComsProp}
#| eval: false

census_table <- 
  modify_census_tibbles(
    census_table,
    mutate,
    
    com_prop = min(com_prop, 1),
    
    levels = "com"
  )
 
```

### Multiply census stats by com_prop

```{r multiplyByComProp}

## TODO: This
census_table <- 
  modify_census_tibbles(
    census_table,
    mutate,
    across(where(is.numeric) & !com_prop, 
           function(x)(x * com_prop)),
    levels = "com"
  )
```

Save Data

```{r SaveData}
saveRDS(census_table, here("data", "intermediate", "census", "merged-data", "03_cleaned-data-ready-for-exploratory-analysis_2022-11-07.RDS"))
```
