---
title: "05_data cleaning"
format: html
editor: visual
---

### Libraries

```{r libs}
#| messages: false
library(here)
library(dplyr)
library(vroom)
library(stringr)
library(purrr)
library(rlang) # for nice error handling
library(lobstr)
```

## Setup

### Read in Census Table

```{r readInCensusTable}
census_table <- readRDS(here("data", "intermediate", "census", "merged-data", "02_grouped-by-level-and-nation_2022-10-25.RDS"))

tree(census_table, max_depth = 5)
```

## Read in Helpers

```{r readHelpers}

## modify_census_tibbles -----------------------------------------------------
## Wrapper around a for loop. Modifies `census_table` at specified 'addresses'
## modify_census_tibbles(x, modify_func, ..., nations, levels, stats)

modify_census_tibbles <- readRDS(here("functions", "modify-census.RDS"))

## selector -------------------------------------------------------------------
## Function factory: makes select functions with specified args.
## Helpful for selecting flexibly amidst slightly inconsistent tables
## selector(...)
## eg. select_geo_codes <- selector(matches("oa_id"), matches("sa_id"))
## select_geo_codes(x, starts_with("something_"))

selector <- readRDS(here("functions", "selector.RDS"))
```

```{r renamingColoumns}

remove_prefix <- function(x, sep, regex = FALSE){
  
  if(!regex){ sep <- stringr::fixed(sep) }
  
  sep_end <- stringr::str_locate(x, sep)[, "end"] 
  
  if(any(is.na(sep_end))){
    na_seps <- which(is.na(sep_end))
    sep_end[na_seps] <- 0
    
    # for(i in na_seps) warning("Separator '", sep, "' not found in colunm name '", x[[i]] , "'")
    }
  
  string_out <- str_sub(x, sep_end + 1)
  
  return(string_out)
                 
}

census_table <-
  modify_census_tibbles(
    census_table,
    modify_func = rename_with,
    .fn = remove_prefix,
    .cols = everything(),
    sep = "..")

```

```{r multiply the proportion across all columns}

multiplier <- function(x){
  
  prop_column = df[ , 5]
  
  round(prop_column) <- function(prop_column)
    round((prop_column), digits = 0)
          if prop_column > 1
          else round((prop_column), 1)}
  
  
  df(prop_column) %>% mutate_at(vars(starts_with("[ , 6]")), ~.*deflator)
  ## instead of mutate_at, use mutate(across())
  ## starts_with wants a character string
  
  x <- some_table_nice
  
  x <- mutate(x, prop_column = min(prop_column, 1))
  
  require(magritrr)
  
  x <- mutate(x, 
              across(
                where(is.numeric),
                multiply_by, 
                prop_column))
  
  
  round(df[ , 5], digits = 1) -> exceed 1
}
  
map(coms_by_nation, 
    
    ## not sure what goes here...
    
    mutate,
    across(where(is.numeric)),
    multiply_by,
    proportion_of_oa_within_co_m_boundary
    )

```
