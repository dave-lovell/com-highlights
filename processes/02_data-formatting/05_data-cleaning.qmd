---
title: "05_data cleaning"
format: html
editor: visual
---

### Libraries

```{r libs}
#| messages: false
library(here)
library(dplyr)
library(vroom)
library(stringr)
library(purrr)
library(rlang) # for nice error handling
library(lobstr)
```

## Setup

### Read in Census Table

```{r readInCensusTable}
census_table <- readRDS(here("data", "intermediate", "census", "merged-data", "02_grouped-by-level-and-nation_2022-10-25.RDS"))

tree(census_table, max_depth = 5)
```

## Read in Helpers

```{r readHelpers}

## modify_census_tibbles -----------------------------------------------------
## Wrapper around a for loop. Modifies `census_table` at specified 'addresses'
## modify_census_tibbles(x, modify_func, ..., nations, levels, stats)

modify_census_tibbles <- readRDS(here("functions", "modify-census.RDS"))

## selector -------------------------------------------------------------------
## Function factory: makes select functions with specified args.
## Helpful for selecting flexibly amidst slightly inconsistent tables
## selector(...)
## eg. select_geo_codes <- selector(matches("oa_id"), matches("sa_id"))
## select_geo_codes(x, starts_with("something_"))
selector <- readRDS(here("functions", "selector.RDS"))
```

```{r renamingColoumns}

remove_prefix <- function(x, sep, regex = FALSE){
  
  if(!regex){ sep <- stringr::fixed(sep) }
  
  sep_end <- stringr::str_locate(x, sep)[, "end"] 
  
  if(any(is.na(sep_end))){
    na_seps <- which(is.na(sep_end))
    sep_end[na_seps] <- 0
    
    # for(i in na_seps) warning("Separator '", sep, "' not found in colunm name '", x[[i]] , "'")
    }
  
  string_out <- str_sub(x, sep_end + 1)
  
  return(string_out)
                 
}

census_table <-
  modify_census_tibbles(
    census_table,
    modify_func = rename_with,
    .fn = remove_prefix,
    .cols = everything(),
    sep = "..")

#RENAMING ETHNICITY TABLES for England, Wales & Scotland 

census_select_ews <- function(x, ...){
  select(x,
         ## com/dioceses/nation
         matches("com"), matches("diocese"), matches("nation"),
         ## Diocese-level fields
         matches("parish_code"), matches("oa_id"),
         ## Nation-level fields
         matches("geo_code"), matches("sa_id"),
         ...)
}

census_select_ews <- function(x){
  
  args <- rlang::enexprs(...)
  
  function(x, ...){
    
    dplyr::select(x, 
          matches("com"), matches("diocese"), matches("nation"),
         matches("parish_code"), matches("oa_id"),
         matches("geo_code"), matches("sa_id"),
         ...)
    
    }
}

# # census_select_ews <- selector(
#          ## com/dioceses/nation
#          matches("com"), matches("diocese"), matches("nation"),
#          ## Diocese-level fields
#          matches("parish_code"), matches("oa_id"),
#          ## Nation-level fields
#          matches("geo_code"), matches("sa_id")
#          )

  

tmp <-
  modify_census_tibbles(
    census_table,
    modify_func = census_select_ews,
    white_or_white_british,
    black_or_black_british,
    asian_or_asian_british,
    mixed_multiple_ethnicity,
    other_ethnicity,
    stats = "ethn",
    nations = c("England", "Wales", "Scotland")
    )

#Renaming age ok
census_table <-
  modify_census_tibbles(
    census_table,
    modify_func = rename_with,
    .fn = str_replace,
    .cols = starts_with("x"),
       "x", "age_",
stats = "pop"
)

#drop all suffix _health in health analysis ok
 census_table <-
   modify_census_tibbles(
     census_table,
     modify_func = rename_with,
     .fn = str_replace,
     .cols = ends_with("_health"),
        "_health", "",
  stats = "health",
  nations = c("Wales", "Scotland", "Northern-Ireland", "England")
 )
 #drop total person ok
 census_table <-
   modify_census_tibbles(
     census_table,
     modify_func = select,
     .cols = -starts_with("total"),
     stats = c("ethn", "health", "house", "rel")
   )
 census_table <-
   modify_census_tibbles(
     census_table,
     modify_func = rename_with,
     .fn = str_replace,
     .cols = starts_with("proportion"),
     "proportion_of_oa_within_co_m_boundary", "coms_prop"
 
 )
 #rename of column proportion of oa - Ireland & Northern Ireland ok
 census_table <-
   modify_census_tibbles(
     census_table,
     modify_func = rename_with,
     .fn = str_replace,
     .cols = starts_with("proportion"),
     "proportion_of_sa_within_co_m_boundary", "coms_prop"
 
 )
 #rename of column proportion of oa - England pop ok
 census_table <-
   modify_census_tibbles(
     census_table,
     modify_func = rename_with,
     .fn = str_replace,
     .cols = starts_with("proportion"),
     "proportion_of_lsoa_within_co_m_boundary", "coms_prop"
 
 )
 #rename of column proportion of oa - Northern Ireland pop ok
 census_table <-
   modify_census_tibbles(
     census_table,
     modify_func = rename_with,
     .fn = str_replace,
     .cols = starts_with("proportion"),
     "proportion_of_soa_within_co_m_boundary", "coms_prop"
 
 )
 #Add _persons to pop tables of Northern Ireland& Repulblic of Ireland
 census_table <-
   modify_census_tibbles(
     census_table,
     modify_func = rename_with,
     .fn = str_replace_all,
     .cols = everything(),
      male_persons = "male",
       female_persons = "female",
       stats = "pop",
    nations = c("Repulblic-of Ireland", "Northern-Ireland")




```

```{r round up the coms prop columns}

coms_prop_roundings <- function(coms_prop) {
  coms_prop = df[ , 5]
  if (coms_prop > 1) {
  round(coms_prop, digits = 0)
  } else {
   round((coms_prop), 1)}

}
#multiply across other columns
  census_table <-
   modify_census_tibbles(
     census_table,
     modify_func = mutate,
     across(where(is.numeric)),
    multiply_by,
    coms_prop
   )
     
  
 
```
