---
title: "08_making-plots"
format: html
editor: visual
---

```{r libraries}
library(tidyverse)
library(here)
library(scales)
library(rlang)
library("carutools") #devtools::install_github("dave-lovell/carutools")
```

```{r readInData}
censustable_plot <- readRDS(here("data", "intermediate", "census", "merged-data", "05_census-data-pivot-longer_2022-11-16.RDS"))
```

### Helpers

#### Do_to_tibbles

```{r makeDoToTibbles}
do_to_tibbles <- function(tibbles, new_function, ..., use.imap = FALSE){
  
  if(use.imap) mapper <- purrr::imap
  else         mapper <- purrr::map
  
  out_list <- list( mapper(tibbles, new_function, ...) )

return(out_list)
}
```

### Modify plot tibbles (before plotting)

#### Add ratio col to plot tibbles

```{r addRatioCol}
censustable_plot <- 
  mutate(censustable_plot,
         rbound_tibbles =
           do_to_tibbles(rbound_tibbles,
                         \(x){
                           out <- group_by(x, level) |> 
                             mutate(ratio = value / sum(value),
                                    com_name = .env[["com"]],
                                    diocese_name = .env[["diocese"]],
                                    nation_name  = .env[["nation"]]) |>
                             ungroup()
                           return(out)
                         })
  )
```

#### Construct modification-helper

Using for-loops to index and modify the mega-tibble

```{r CensusDataPlots}
# censustable_plot$rbound_tibbles |> 
#   ggplot() +
#   geom_histogram(mapping = aes(x = levels),
#                  fill = "blue")

modify_plot_tibbles <- 
  function(
    x,
    modify_func,
    ...,
    nation = 
      c("England", "Northern-Ireland", "Republic-of-Ireland", "Scotland", "Wales"),
    stat = 
      c("ethn", "health", "house", "pop", "rel"),
    
    col_to_modify = "rbound_tibbles",
    new_col = "rbound_tibbles"){
    
    for(this_nation in nation){
      for(this_stat in stat){
        
        x[[new_col]][x[["nation"]] == this_nation] <- 
          map(x[[col_to_modify]][x[["nation"]] == this_nation],

              function(y){
                y[[this_stat]] <- modify_func(y[[this_stat]], ...)
                return(y)
                
                })
      }
    }
    return(x)
  }
```

#### Make modifications

```{r makeModifications}
censustable_plot <- 
  modify_plot_tibbles(
    censustable_plot,
    stat   = "health",
    modify_func = mutate,
    levels = str_replace(levels, "_", " "),
    levels = 
      ordered(
        levels,
        levels = c("very bad", "bad", "fair", "good", "very good", "not stated")) |>
      # Not stated only exists for ROI - so drop if empty
      fct_drop(only = "non stated")
      )

censustable_plot <- 
  modify_plot_tibbles(
    censustable_plot,
    stat   = "ethn",
    modify_func = mutate,
    levels = ordered(levels) |> 
      fct_relabel(str_replace, "_", " ") |> 
      fct_relabel(str_replace, "or", "\n") |> 
      fct_relabel(str_replace, " ", "\n") |> 
      fct_reorder(ratio, .fun = max, .desc = TRUE) 
    
    ## do these seperately
    # scale_x_discrete(guide = guide_axis(n.dodge = 2))
    )

# censustable_plot <- modify_plot_tibbles(censustable_plot, modify_fun = ungroup)
censustable_plot <- 
  modify_plot_tibbles(
    censustable_plot,
    stat   = "rel",
    modify_func = mutate,
    levels = ordered(levels) |> 
      fct_relabel(str_replace, "_", "\n") |> 
      fct_reorder(ratio, .fun = max, .desc = TRUE) |>
      fct_lump_n(5, w = ratio) # possibly tweak value of n for some nations?
    )

censustable_plot <- 
  modify_plot_tibbles(
    censustable_plot,
    modify_func = group_by,
    level, levels,
    stat = "rel", 
  )

censustable_plot <- 
  modify_plot_tibbles(
    censustable_plot,
    modify_func = summarise,
    stat = "rel",
    value = sum(value),
    ratio = sum(ratio),
    com_name = unique(com_name),
    diocese_name = unique(diocese_name),
    nation_name = unique(nation_name), 
    .groups = "drop"
  )

censustable_plot <- 
  modify_plot_tibbles(
    censustable_plot,
    stat   = "house",
    modify_func = mutate,
    levels = ordered(levels) |> 
      fct_relabel(str_replace_all, "_", " ") |> 
      fct_reorder(ratio, .fun = max, .desc = TRUE))
  
censustable_plot <- 
  modify_plot_tibbles(
    censustable_plot,
    stat   = "house",
    nation = c("Wales", "Scotland", "Northern-Ireland", "England"),
    modify_func = mutate,
    levels = fct_recode(levels,
      `couple\n(dep. children)` = "couple dependent children", 
      `one person\n(65+)` = "one person household 65",
      `one person\n(<64)` = "one person household 64", 
      `couple no\n(dep. children)`  = "couple no dependent children",
      `lone parent\n(dep. children)`  = "lone parent dependent children",
      `other\n(no dep. children)`  = "other household no dependent children",
      `other\n(dep. children)`  = "other household dependent children"
    ))

censustable_plot <- 
  modify_plot_tibbles(
    censustable_plot,
    stat   = "house",
    nation = c("Republic-of-Ireland"),
    modify_func = mutate,
    levels = fct_recode(levels,
      `couple\n(dep. children)` = "couple dependent children", 
      `one person` = "one person household",
      `couple no\n(dep. children)`  = "couple no dependent children",
      `lone parent\n(dep. children)`  = "lone parent dependent children",
      `other\n(no dep. children)`  = "other household no dependent children",
      `other\n(dep. children)`  = "other household dependent children"
    ))

censustable_plot <- 
  modify_plot_tibbles(
    censustable_plot,
    stat = "pop",
    modify_func = mutate,
    levels = ordered(levels) |> 
      fct_relabel(str_replace_all, "age_", ""),
      fct_relevel(levels)
    )
    
censustable_plot <- 
  modify_plot_tibbles(
    censustable_plot,
    stat = "pop",
    modify_func = mutate,
    levels = ordered(levels) |>
      fct_relabel(str_replace_all, "_years", "\nyears"),
      fct_relevel(levels)
    )
     
      

```

Come up with ggplot table

```{r ggplotTable}

nice_x_lab <- function(tibble_name) return(tibble_name)

plot_bar <- function(tibble, tibble.name, plot_title = NULL){
  
  nice_lab <- nice_x_lab(tibble.name)
  
  ggplot(tibble, 
         aes(x = levels, 
             y = ratio, fill = level)) + 
    geom_bar(stat = "identity", position = "dodge", colour = "gray80") +
    scale_y_continuous(name = "% population", labels = percent) +
    ggtitle(plot_title) +
    xlab(nice_lab) +
    theme_minimal()  + 
    ca_scale_fill_discrete()
    #scale_x_discrete(guide = guide_axis(n.dodge = 2))
}

censustable_plot <- 
  mutate(censustable_plot,
         plots = do_to_tibbles(rbound_tibbles, rowwise),
         plots = do_to_tibbles(
           plots, plot_bar, plot_title = com,
           use.imap = TRUE)
  )

# censustable_plot$plots
###############################################################################

plotpeek <- function(name = 1) censustable_plot$plots[[1]][[name]]



censustable_plot |>
  group_by(nation) |> 
  summarise(plots = first(plots)) |> 
  pull(plots)

```
