---
title: "Make census data tables"
author: "Dave"
format: html
editor: visual
---

## Introduction

### Libraries

```{r libraries}
#| message: false
library(here)
library(dplyr)
library(readxl)
library(fs)
library(stringr)
library(purrr)
library(vroom)
```

## Read data using excel_extract()

Currently we've got a lot of data tables from a previous project. We've also got a function, `excel_extract()` , which is designed to read those tables with some degree of flexibility, because they're not always consistently formatted.

### Load excel_extract()

`excel_extract()` is saved as an RDS in the 'functions' directory.

```{r loadExcelExtract}
excel_extract <- readRDS(here("functions", "excel-extract.RDS"))
```

### Define paths

```{r definePaths}
## taking advantage here's (undocument) list-handling behaviour
census_path <- list("data", "inputs", "census")

nations_path  <- here(census_path, "nations")
dioceses_path <- here(census_path, "dioceses")
coms_path     <- here(census_path, "com")

paths <- list(
  nations  = nations_path,
  dioceses = dioceses_path,
  coms     = coms_path
)
```

### List excel files

```{r listExcels}
excels <- lapply(paths, dir, full.names = TRUE, pattern = "\\.xlsx")
```

### Convert lists to vectors and name

Currently, `excels` is a 3-length list of vectors. The simplest way to run `excel_extract()` on each file will be to convert the vectors within each list to a set of named vectors.

```{r convertListsToVectors}

# helper to use in function
extract_file_name <- function(path) str_extract(path, "(?<=/)[^/]+(?=$)")

get_clean_file_name <- function(path){
  
  file_name <- extract_file_name(path)
  
  str_remove(file_name, ".xlsx") |>   # remove suffix
    str_replace_all("&", "and") |>    # recode ampersands
    str_remove_all("[:punct:]") |>    # strip punctuation
    str_squish() |>                   # clean up whitespace
    str_replace_all("[:space:]", "-") # spaces to hypens
}

listify_files <- function(x){
  
  list_names <- get_clean_file_name(x)
  
  out <- as.list(x)
  names(out) <- list_names
  
  return(out)
}

excels <- lapply(excels, listify_files)

# take a little look...
show <- function(x) print(str_c(class(x), length(x), sep = "; "))
walk(excels,show)
```

### Read excel files

It's *probably* best to do this one directory at at a time, since there are only 3 directories and each one might want slightly different arguments. NB this code block takes maybe like 15/20 minutes to run.

```{r readExcels}
#| cache: true
census_tables <- lapply(excels, lapply, excel_extract,
                        tabs = c(
                          1, "Ethnicity", "Religion", "Health", "Household type"
                        ),
                        numberise = TRUE)
```

## Write CSVs

### Create directories

```{r createDirs}
# create nations/dioceses/com directories
dir_create(unlist(paths), "csvs")

## EXPLANATION ##############################################################
## Create a function for each level of the list. Top two functions          #
## are wrappers that call purrr::walk() on the layer below, bottom function #
## is a wrapper for vroom::vroom() that saves each table                    #
#############################################################################

## TOP LEVEL ## (com, nations, dioceses)                                    
## For each level, save tables by location ::::::::::::::::::::::::::::::::::

save_location_tables <- function(locations, this_path){
  
  location_names <- as.list(names(locations))
    
  this_path <- path(this_path, "csvs")
    
  walk2(.x = locations,
        .y = location_names,
        
        .f = save_all_tables, # defined below
          
        directory = this_path 
  )}

#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


## NEST LEVEL 1 ## (england, scotland... // <<dioceses idk>> // blackburn, sligo...)
## For each location, save all tables (one per statistic) :::::::::::::::::::

save_all_tables <- 
  function(location_tables, location_name, directory){
    
    save_path     <- dir_create(directory, location_name)
    stat_names <- as.list   (names(location_tables)  )
    
    walk2(.x = location_tables,
          .y = stat_names,
          
          .f = save_table,   # defined below
          
          location  = location_name,
          directory = save_path
    )}

#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


## NEST LEVEL 2 ## (health, ethnicity, population ...)
## For each table, save the table ::::::::::::::::::::::::::::::::::::::::::::

save_table <-
  function(stat_table, stat_name,
           location, directory){
    
    file_name <- str_c(location, "-", stat_name, ".csv")
    save_path <-  path(directory, file_name            )

    vroom_write(stat_table, save_path, delim = ",")
  }

#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


## EXECUTE ###################################################################
walk2(census_tables, paths, save_location_tables)                            #
##############################################################################
```
