---
title: "Cleaning Census Data Table"
format: html
editor: visual
---

#### Libraries

```{r libs}
#| message: false
library(here)
library(dplyr)
library(vroom)
library(stringr)
library(purrr)
library(rlang) # for nice error handling
library(lobstr)
```

## Reading in the Overall Table

```{r read in Overall Table}
overall_table <- readRDS(
  here("data", "intermediate", "census", "merged-data",
       "01_all-census-data_list_2022-10-12.RDS"
       ))
```

## Creating New Dataframe For nations from ComsList

We want to make a 5-length list, the elements of which correspond to the nations of England, Scotland, Northern Ireland, The Republic of Ireland and Wales. Each element of the list is a list of five tibbles, which correspond to stats for ethnicity, population, health, household-composition and religion respectively.

Currently we're just doing this for CoM data. Once we done that, we'll look at how to functionalise and repeat for dioceses and nations.

### Read in table of CoM, dioceses and nations

This will allow us to sort our CoM tables by nation, which is necessary because each nation's statistics are handled differently.

```{r readInComNationDiocesesTable}
com_table <-
  vroom(
    here("data", "inputs", "census", "com-diocese-nation-table.csv"),
    col_types = "cccc"
    ) |> 
  rename_with(str_to_lower) 

```

### Reformat CoM names

We will need to reformat the `com` field of `com_table` so that we can join the com from `overall_table` succesfully.

```{r reformatComNames}

clean_com_name <- function(com_name){
  
    str_replace_all(com_name, "&", "and") |>    # recode ampersands
    str_remove_all("[:punct:]") |>    # strip punctuation
    str_squish() |>                   # clean up whitespace
    str_replace_all("[:space:]", "-") # spaces to hypens
}

clean_diocese_name <- function(diocese_name){
  str_squish(diocese_name) |> 
    str_to_title() |> 
    str_replace_all("&", "and") |>
    str_replace_all(" And ", " and ") |> 
    str_remove_all("[:punct:]") |> 
    str_replace_all("[:space:]", "-")
}

clean_nation_name <- function(nation_name){
  str_squish(nation_name) |> 
    str_replace_all("[:space:]", "-")
}

com_table <- mutate(com_table, 
                    com     = clean_com_name(com),
                    diocese = clean_diocese_name(diocese),
                    nation  = clean_nation_name(nation))
```

### 'Join' CoM data to overall_table and split

Not technically *joining*, but we can use `purrr::pluck()` to add a list-column to `com_table`. Each element of this list is itself a list of five tibbles, `pluck()`'ed from `overall_table`.

```{r pluckJoinTibbles}
com_table <- rowwise(com_table)

com_table <- mutate(com_table, 
                    com_tables = 
                      list(
                        pluck(overall_table, "com", com)
                        ),
                    dioceses_tables = 
                      list(
                        pluck(overall_table, "dioceses", diocese) # something wrong here?
                      ),
                    nations_tables = 
                      list(
                        pluck(overall_table, "nation", nation)
                      ))
```

We can then use `dplyr::group_split()` and `group_keys()` to split `com_table` into a list of five tibbles, each named after the nation it represents.

```{r splitTibbles}
com_table <- group_by(com_table, nation)
nations <- group_keys(com_table)[["nation"]]

coms_by_nation <- group_split(com_table)
names(coms_by_nation) <- nations
rm(nations)
```

### Mutate and Rbind tibble lists

#### Add com, diocese and nation columns to each tibble

Add a field to each tibble in `coms_by_nation` containing the name of the CoM. We'll need this to know which CoM is which once we `rbind()` the tibbles together.

```{r addComField}
coms_by_nation <- lapply(coms_by_nation, rowwise)

add_column <- function(this_list, col_name, value){
  
  col_name <- enexpr(col_name)
  
  list(
    map(
      this_list,
      mutate,
      !!col_name := value
    ) |> 
      map(relocate, !!col_name)
    )}

coms_by_nation <- 
  lapply(
    coms_by_nation,
    mutate,
    across(
      c(com_tables, dioceses_tables, nations_tables),
      add_column, nation, nation
    )
  )

coms_by_nation <- 
  lapply(
    coms_by_nation,
    mutate,
    across(
      c(com_tables, dioceses_tables),
      add_column, diocese, diocese
      )
  )

coms_by_nation <- 
   lapply(
     coms_by_nation,
     mutate,
     com_tables = add_column(com_tables, com, com)
     )
```

### Rbind tibbles into long tibbles

This process revealed a data quality issue: inconsistent names for Llandaff CoM's source data. Right now we're ignoring Llandaff, but we'll fix the data in due course.

## Sort out Llandaff Diocese

Because Llandaff's CoM area is also just the whole diocese of Llandaff (I think), the Diocese files have a 'proportion_of_lsoa...' field. We need to remove this from `coms_by_nation`.

```{r fixLlandaffDiocese}
coms_by_nation[["Wales"]][["dioceses_tables"]][
  coms_by_nation[["Wales"]][["diocese"]] == "Llandaff"
] <- 
  coms_by_nation[["Wales"]][["dioceses_tables"]][
    coms_by_nation[["Wales"]][["diocese"]] == "Llandaff"
  ] |>
  map(map, select, -matches(".*proportion_of_.+_within_.+"))
```

### Helper: pre_bind_name

A function that renames tibbles ready for binding. Unmatching names will be flagged by another helper, `rbind_warn()`

```{r pre_bind_rename}
pre_bind_rename <- function(x){
  
  ## male_persons --> males ect.
  x <- 
  rename_with(
    x,
    str_replace,
    .cols = matches("pop\\.\\..+_persons"),
    "_persons",
    "s"
    ) |> 
    rename_with(
      str_replace,
      .cols = matches(".+proportion_of_.+_within_co_m_boundary"),
      "_of_.+_within_",
      "_of_area_within_"
    ) |> 
      rename_with(
        str_remove,
        .cols = contains("ethnic_group_e_s_w_"),
        "ethnic_group_e_s_w_"
    ) |> 
    rename_with(
      str_remove,
      .cols = ends_with("_unit_persons"),
      "_unit_persons(?=$)"
    )
  
  return(x)
}
```

#### Helper: Rbind warner

A little wrapper around `rbind()` that we can use to ignore bad calls and passes a warning (or, optionally, an error)

```{r rbindWarner}



rbind_warn <- function(x, y){
  
  x <- pre_bind_rename(x)
  y <- pre_bind_rename(y)
  
  tryCatch(
    expr = {
      
      
      
      rbind(x,y)
      
      },
    error = function(cnd){
      bad.names.y <- names(y)[!names(y) %in% names(x)]
      bad.names.x <- names(x)[!names(x) %in% names(y)]
      bad.names <- c(bad.names.x, bad.names.y)
      warning("\nThe following names were not r-bindable:",
              "\n* ", 
              str_c(bad.names, collapse = "\n* "),
              "\n------------------------------------------------------\n\n")
      # return(x)
      bad_out <- tibble(oops = NA)
      return(bad_out)
    }
  )
}

```

```{r rbindTables}

make_long_tables <- function(x){

  tables_to_bind <- 
    list(
      com      =
        pull(x, com_tables),
      dioceses = 
        group_by(x, diocese) |> 
        summarise(dioceses_tables = unique(dioceses_tables)) |> 
        pull(),
      nations  = 
        group_by(x, nation) |> 
        summarise(nations_tables = unique(nations_tables)) |> 
        pull()
    )

  map(tables_to_bind,
    ~ pmap(.x, list) |>
      map(reduce, rbind_warn)
  )
}

out <- map(coms_by_nation, make_long_tables)
lobstr::tree(out, max_depth = 3)
```

## Save data

```{r saveData}
saveRDS(out, here("data", "intermediate", "census", "merged-data", "02_grouped-by-level-and-nation_2022-10-25.RDS"))
```
